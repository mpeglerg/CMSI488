const ohm = require("ohm-js");

function isCanadianPostalCode(s) {
   const grammar = ohm.grammar(`CanadianPostalCode {
      postalCode = ~("D" | "F" | "I" | "O" | "Q" | "U" | "W" | "Z") "A" .. "Z" digit "A" .. "Z" " " digit "A" .. "Z" digit
   }`)
   return grammar.match(s).succeeded();
}
function isVisa(s) {
   const grammar = ohm.grammar(`VisaNumber {
      visaNumber = "4" digit digit digit digit digit digit digit digit digit digit digit digit (digit digit digit)?
   }`)
   return grammar.match(s).succeeded();
}
function isMastercard(s) {
   const grammar = ohm.grammar(`MastercardNumber {
      mastercardNumber = "5" "0" .. "5" digit digit digit digit digit digit digit digit digit digit digit digit digit digit
   }`)
   return grammar.match(s).succeeded();
}

function isDivisibleBy64(s) {
   const grammar = ohm.grammar(`IsDivisibleBy64 {
      isDivisibleBy64 = "1" ("0"* | "1"*) "000000" --normal
      | "0"+ --zeros
}`)
   return grammar.match(s).succeeded();
}
function isAdaFloat(s) {
   const grammar = ohm.grammar(`AdaFloat {
      first = ((digit("_" digit)?)+(("." (digit "_"?)+)?((("e" | "E"))("+" | "-")?((digit "_"?)+)))?)
      second = ((digit "_"?)+ "#" (alnum | "_")+ ("." (alnum | "_")+)? "#")(("e" | "E") "-"? ((digit "_"?)+))?

      adaFloat = first | second
   }`)
   return grammar.match(s).succeeded();
}

function isEightThroughTwentyNine(s) {
    const grammar = ohm.grammar(`IsEightThroughTwentyNine {
        isEightThroughTwentyNine = "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22"|  "23" | "24" | "25" | "26" | "27" | "28" | "29"
    }`)
    return grammar.match(s).succeeded();
}

function isMLComment(s) {
   const grammar = ohm.grammar(`IsMLComment {
      comment = "(*" (alnum* ~comment) "*)"
   }`)
   return grammar.match(s).succeeded();
}

module.exports = {
   isCanadianPostalCode,
   isVisa,
   isMastercard,
   isEightThroughTwentyNine,
   isMLComment,
   isDivisibleBy64
   }